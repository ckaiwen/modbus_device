// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/modbusdevice.proto

package modbus_device

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrorCode int32

const (
	ErrorCode_NORMAL  ErrorCode = 0 //正常
	ErrorCode_TIMEOUT ErrorCode = 1 //modbus485通讯超时
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "NORMAL",
		1: "TIMEOUT",
	}
	ErrorCode_value = map[string]int32{
		"NORMAL":  0,
		"TIMEOUT": 1,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_modbusdevice_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_modbusdevice_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_modbusdevice_proto_rawDescGZIP(), []int{0}
}

//读取多个保持寄存器(0x03命令)请求
type ReadHoldingRegistersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlaveId uint32 `protobuf:"varint,1,opt,name=slave_id,json=slaveId,proto3" json:"slave_id,omitempty"`
	Address uint32 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Num     uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *ReadHoldingRegistersRequest) Reset() {
	*x = ReadHoldingRegistersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_modbusdevice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadHoldingRegistersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHoldingRegistersRequest) ProtoMessage() {}

func (x *ReadHoldingRegistersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_modbusdevice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHoldingRegistersRequest.ProtoReflect.Descriptor instead.
func (*ReadHoldingRegistersRequest) Descriptor() ([]byte, []int) {
	return file_proto_modbusdevice_proto_rawDescGZIP(), []int{0}
}

func (x *ReadHoldingRegistersRequest) GetSlaveId() uint32 {
	if x != nil {
		return x.SlaveId
	}
	return 0
}

func (x *ReadHoldingRegistersRequest) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ReadHoldingRegistersRequest) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

//读取多个保持寄存器(0x03命令)响应
type ReadHoldingRegistersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=modbus_device.ErrorCode" json:"err_code,omitempty"`
	Results []byte    `protobuf:"bytes,2,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *ReadHoldingRegistersResponse) Reset() {
	*x = ReadHoldingRegistersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_modbusdevice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadHoldingRegistersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHoldingRegistersResponse) ProtoMessage() {}

func (x *ReadHoldingRegistersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_modbusdevice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHoldingRegistersResponse.ProtoReflect.Descriptor instead.
func (*ReadHoldingRegistersResponse) Descriptor() ([]byte, []int) {
	return file_proto_modbusdevice_proto_rawDescGZIP(), []int{1}
}

func (x *ReadHoldingRegistersResponse) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_NORMAL
}

func (x *ReadHoldingRegistersResponse) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

//写多个保持寄存器(0x10命令)请求
type WriteMultipleRegistersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlaveId uint32 `protobuf:"varint,1,opt,name=slave_id,json=slaveId,proto3" json:"slave_id,omitempty"`
	Address uint32 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Num     uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Value   []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WriteMultipleRegistersRequest) Reset() {
	*x = WriteMultipleRegistersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_modbusdevice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMultipleRegistersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMultipleRegistersRequest) ProtoMessage() {}

func (x *WriteMultipleRegistersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_modbusdevice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMultipleRegistersRequest.ProtoReflect.Descriptor instead.
func (*WriteMultipleRegistersRequest) Descriptor() ([]byte, []int) {
	return file_proto_modbusdevice_proto_rawDescGZIP(), []int{2}
}

func (x *WriteMultipleRegistersRequest) GetSlaveId() uint32 {
	if x != nil {
		return x.SlaveId
	}
	return 0
}

func (x *WriteMultipleRegistersRequest) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *WriteMultipleRegistersRequest) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *WriteMultipleRegistersRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

//写取多个保持寄存器(0x10命令)响应
type WriteMultipleRegistersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=modbus_device.ErrorCode" json:"err_code,omitempty"`
}

func (x *WriteMultipleRegistersResponse) Reset() {
	*x = WriteMultipleRegistersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_modbusdevice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMultipleRegistersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMultipleRegistersResponse) ProtoMessage() {}

func (x *WriteMultipleRegistersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_modbusdevice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMultipleRegistersResponse.ProtoReflect.Descriptor instead.
func (*WriteMultipleRegistersResponse) Descriptor() ([]byte, []int) {
	return file_proto_modbusdevice_proto_rawDescGZIP(), []int{3}
}

func (x *WriteMultipleRegistersResponse) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_NORMAL
}

var File_proto_modbusdevice_proto protoreflect.FileDescriptor

var file_proto_modbusdevice_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x1b, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x61, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0x6d, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7c,
	0x0a, 0x1d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x1e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x2a, 0x24, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x32, 0xf4, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x48, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_modbusdevice_proto_rawDescOnce sync.Once
	file_proto_modbusdevice_proto_rawDescData = file_proto_modbusdevice_proto_rawDesc
)

func file_proto_modbusdevice_proto_rawDescGZIP() []byte {
	file_proto_modbusdevice_proto_rawDescOnce.Do(func() {
		file_proto_modbusdevice_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_modbusdevice_proto_rawDescData)
	})
	return file_proto_modbusdevice_proto_rawDescData
}

var file_proto_modbusdevice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_modbusdevice_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_modbusdevice_proto_goTypes = []interface{}{
	(ErrorCode)(0),                         // 0: modbus_device.ErrorCode
	(*ReadHoldingRegistersRequest)(nil),    // 1: modbus_device.ReadHoldingRegistersRequest
	(*ReadHoldingRegistersResponse)(nil),   // 2: modbus_device.ReadHoldingRegistersResponse
	(*WriteMultipleRegistersRequest)(nil),  // 3: modbus_device.WriteMultipleRegistersRequest
	(*WriteMultipleRegistersResponse)(nil), // 4: modbus_device.WriteMultipleRegistersResponse
}
var file_proto_modbusdevice_proto_depIdxs = []int32{
	0, // 0: modbus_device.ReadHoldingRegistersResponse.err_code:type_name -> modbus_device.ErrorCode
	0, // 1: modbus_device.WriteMultipleRegistersResponse.err_code:type_name -> modbus_device.ErrorCode
	1, // 2: modbus_device.Device.ReadHoldingRegisters:input_type -> modbus_device.ReadHoldingRegistersRequest
	3, // 3: modbus_device.Device.WriteMultipleRegisters:input_type -> modbus_device.WriteMultipleRegistersRequest
	2, // 4: modbus_device.Device.ReadHoldingRegisters:output_type -> modbus_device.ReadHoldingRegistersResponse
	4, // 5: modbus_device.Device.WriteMultipleRegisters:output_type -> modbus_device.WriteMultipleRegistersResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_modbusdevice_proto_init() }
func file_proto_modbusdevice_proto_init() {
	if File_proto_modbusdevice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_modbusdevice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadHoldingRegistersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_modbusdevice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadHoldingRegistersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_modbusdevice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMultipleRegistersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_modbusdevice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMultipleRegistersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_modbusdevice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_modbusdevice_proto_goTypes,
		DependencyIndexes: file_proto_modbusdevice_proto_depIdxs,
		EnumInfos:         file_proto_modbusdevice_proto_enumTypes,
		MessageInfos:      file_proto_modbusdevice_proto_msgTypes,
	}.Build()
	File_proto_modbusdevice_proto = out.File
	file_proto_modbusdevice_proto_rawDesc = nil
	file_proto_modbusdevice_proto_goTypes = nil
	file_proto_modbusdevice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceClient interface {
	//读取保持寄存器(0x03命令)
	ReadHoldingRegisters(ctx context.Context, in *ReadHoldingRegistersRequest, opts ...grpc.CallOption) (*ReadHoldingRegistersResponse, error)
	//写多个保持寄存器(0x10命令)
	WriteMultipleRegisters(ctx context.Context, in *WriteMultipleRegistersRequest, opts ...grpc.CallOption) (*WriteMultipleRegistersResponse, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) ReadHoldingRegisters(ctx context.Context, in *ReadHoldingRegistersRequest, opts ...grpc.CallOption) (*ReadHoldingRegistersResponse, error) {
	out := new(ReadHoldingRegistersResponse)
	err := c.cc.Invoke(ctx, "/modbus_device.Device/ReadHoldingRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) WriteMultipleRegisters(ctx context.Context, in *WriteMultipleRegistersRequest, opts ...grpc.CallOption) (*WriteMultipleRegistersResponse, error) {
	out := new(WriteMultipleRegistersResponse)
	err := c.cc.Invoke(ctx, "/modbus_device.Device/WriteMultipleRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
type DeviceServer interface {
	//读取保持寄存器(0x03命令)
	ReadHoldingRegisters(context.Context, *ReadHoldingRegistersRequest) (*ReadHoldingRegistersResponse, error)
	//写多个保持寄存器(0x10命令)
	WriteMultipleRegisters(context.Context, *WriteMultipleRegistersRequest) (*WriteMultipleRegistersResponse, error)
}

// UnimplementedDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (*UnimplementedDeviceServer) ReadHoldingRegisters(context.Context, *ReadHoldingRegistersRequest) (*ReadHoldingRegistersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHoldingRegisters not implemented")
}
func (*UnimplementedDeviceServer) WriteMultipleRegisters(context.Context, *WriteMultipleRegistersRequest) (*WriteMultipleRegistersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMultipleRegisters not implemented")
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_ReadHoldingRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHoldingRegistersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).ReadHoldingRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_device.Device/ReadHoldingRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).ReadHoldingRegisters(ctx, req.(*ReadHoldingRegistersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_WriteMultipleRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMultipleRegistersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).WriteMultipleRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_device.Device/WriteMultipleRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).WriteMultipleRegisters(ctx, req.(*WriteMultipleRegistersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modbus_device.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadHoldingRegisters",
			Handler:    _Device_ReadHoldingRegisters_Handler,
		},
		{
			MethodName: "WriteMultipleRegisters",
			Handler:    _Device_WriteMultipleRegisters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/modbusdevice.proto",
}
